import logging

from homeassistant.components.camera import Camera
from homeassistant.core import HomeAssistant
from homeassistant.config_entries import ConfigEntry
from homeassistant.helpers.entity_platform import AddEntitiesCallback

from .const import DOMAIN

_LOGGER = logging.getLogger(__name__)

# The path to the SVG file generated by the add-on.
# The /share directory in an add-on is mapped to /config/share in Home Assistant.
SVG_PATH = "/config/share/blueprint.svg"


async def async_setup_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """Set up the camera platform."""
    async_add_entities([BlueprintCamera(hass, entry)])


class BlueprintCamera(Camera):
    """The camera entity for the 3D Blueprint."""

    def __init__(self, hass: HomeAssistant, entry: ConfigEntry) -> None:
        """Initialize the camera."""
        super().__init__()
        self.hass = hass
        self.entry = entry
        self._attr_name = "3D Blueprint Live View"
        self._attr_unique_id = f"{entry.entry_id}_blueprint_camera"
        self._attr_device_info = {
            "identifiers": {(DOMAIN, entry.entry_id)},
            "name": "HA 3D Blueprint Control",
            "manufacturer": "Community",
        }

    @property
    def content_type(self) -> str:
        """Return the content type of the image."""
        return "image/svg+xml"

    async def async_camera_image(
        self, width: int | None = None, height: int | None = None
    ) -> bytes | None:
        """Return the SVG image as bytes."""
        try:
            # Asynchronously read the file from the shared directory
            async with self.hass.async_add_executor_job(self._read_svg_file) as image:
                return image
        except FileNotFoundError:
            _LOGGER.warning("Blueprint SVG file not found at: %s", SVG_PATH)
            return None
        except Exception as e:
            _LOGGER.error("Error reading blueprint SVG file: %s", e)
            return None

    def _read_svg_file(self) -> bytes | None:
        """Read the SVG file in a blocking way."""
        with open(SVG_PATH, "rb") as f:
            return f.read()
