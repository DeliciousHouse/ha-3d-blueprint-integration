"""Camera platform for HA 3D Blueprint."""

import logging

from homeassistant.components.local_file.camera import LocalFileCamera
from homeassistant.core import HomeAssistant
from homeassistant.config_entries import ConfigEntry
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.device_registry import DeviceInfo

from .const import DOMAIN

_LOGGER = logging.getLogger(__name__)

# The path to the SVG file generated by the add-on.
# The /share directory in an add-on is mapped to /config/share in Home Assistant.
SVG_PATH = "/config/share/blueprint.svg"


async def async_setup_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """Set up the camera platform."""
    # The LocalFileCamera handles all the file reading and serving.
    camera = BlueprintCamera(entry, SVG_PATH)
    async_add_entities([camera])


class BlueprintCamera(LocalFileCamera):
    """The camera entity for the 3D Blueprint, based on LocalFileCamera."""

    def __init__(self, entry: ConfigEntry, file_path: str) -> None:
        """Initialize the camera."""
        super().__init__(entry.entry_id, file_path)
        # We override the name and unique_id from the base class.
        self._attr_name = "HA 3D Blueprint"
        self._attr_unique_id = f"{entry.entry_id}_blueprint_camera"
        self._attr_device_info = DeviceInfo(
            identifiers={(DOMAIN, entry.entry_id)},
            name="HA 3D Blueprint Control",
            manufacturer="DeliciousHouse",
            model="Blueprint Engine",
        )

    @property
    def content_type(self) -> str:
        """Return the content type of the image."""
        # Override the content type to specify SVG.
        return "image/svg+xml"

